#******************************************************************************
#
# GNU GPLv2 License
#
#******************************************************************************
#
# The compiler to be used.
#
#******************************************************************************

ifndef COMPILER
COMPILER=gcc
endif

#******************************************************************************
#
# Definitions for using GCC.
#
#******************************************************************************

PREFIX=arm-none-eabi

SRCS=$(wildcard $(SRCDIR)/*.c)
OBJS=$(patsubst $(SRCDIR)/%.c,${COMPILER}/${ODIR}/%.o,$(SRCS))

#
# The command for calling the compiler.
#
CC=${PREFIX}-gcc
#
# Set the compiler CPU/FPU options.
#

CPU=-mcpu=cortex-m4
FPU=-mfpu=fpv4-sp-d16 -mfloat-abi=softfp

#
# The flags passed to the assembler.
#
AFLAGS=-mthumb \
       ${CPU}  \
       ${FPU}  \
       -MD

#
# The flags passed to the compiler.
#
CFLAGS=-mthumb             \
       ${CPU}              \
       ${FPU}              \
       -ffunction-sections \
       -fdata-sections     \
       -MD                 \
       -std=c99            \
       -Wall               \
       -pedantic           \
       -DPART_${PART}      \
       -c

#
# The command for calling the library archiver.
#
AR=${PREFIX}-ar

#
# The command for calling the linker.
#
LD=${PREFIX}-ld

#
# The flags passed to the linker.
#--gc-sections

LDFLAGS=--gc-sections     \
		--architecture=cortex-m4   \
		-Map=${COMPILER}/${LISTDIR}/file.map \
		

#
# Get the location of libgcc.a from the GCC front-end.
#
LIBGCC:=${shell ${CC} ${CFLAGS} -print-libgcc-file-name}
LIBGCC_DIR:=$(dir ${LIBGCC})
LIBGCC_DIR:=$(realpath -s ${LIBGCC_DIR} )
#
# Get the location of libc.a/libm.a from the GCC front-end.
#
LIBC:=${shell ${CC} ${CFLAGS} -print-file-name=libc.a}
LIBC_DIR:=/usr/lib/arm-none-eabi/newlib/thumb/v7e-m+fp/softfp
LIBC:=/usr/lib/arm-none-eabi/newlib/thumb/v7e-m+fp/softfp/libc.a
LIBM:=/usr/lib/arm-none-eabi/newlib/thumb/v7e-m+fp/softfp/libm.a
#

#
# The command for extracting images from the linked executables.
#
OBJCOPY=${PREFIX}-objcopy

#
# Tell the compiler to include debugging information if the DEBUG environment
# variable is set.
#

ifdef DEBUG
CFLAGS+=-g -D DEBUG -O0
else
CFLAGS+=-Os
endif

#
# Add the include file paths to AFLAGS and CFLAGS.
#
AFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}
CFLAGS+=${patsubst %,-I%,${subst :, ,${IPATH}}}

#
# The rule for building the object file from each C source file.
#
${COMPILER}${SUFFIX}/${ODIR}/%.o:${SRCDIR}/%.c
	@if [ 'x${VERBOSE}' = x ];                            \
	 then                                                 \
	     echo "  CC    ${<}";                             \
	 else                                                 \
	     echo ${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}; \
	 fi
	@${CC} ${CFLAGS} -D${COMPILER} -o ${@} ${<}

#
# The rule for building the object file from each assembly source file.
#
${COMPILER}${SUFFIX}/${ODIR}/%.o: %.S
	@if [ 'x${VERBOSE}' = x ];                               \
	 then                                                    \
	     echo "  AS    ${<}";                                \
	 else                                                    \
	     echo ${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}; \
	 fi
	@${CC} ${AFLAGS} -D${COMPILER} -o ${@} -c ${<}

#
# The rule for creating an object library.
#

${COMPILER}${SUFFIX}/%.a:
	@if [ 'x${VERBOSE}' = x ];     \
	 then                          \
	     echo "  AR    ${@}";      \
	 else                          \
	     echo ${AR} -cr ${@} ${^}; \
	 fi
	@${AR} -cr ${@} ${^}

#
# The rule for linking the application.
#

${COMPILER}${SUFFIX}/${TARGETDIR}/%.axf:
	@if [ 'x${VERBOSE}' = x ];                                            \
	 then                                                                 \
	     echo "  LD    ${@} -T ${LDNAME}";                                \
	 else                                                                 \
	    echo ${LD} ${LDFLAGS} $(filter %.o %.a, ${^})  -T ${LDNAME}       \
	    -o ${@}; 	        			  								  \
	 fi                                                                   
	@${LD} ${LDFLAGS}  $(filter %.o %.a, ${^}) -T ${LDNAME}  -o ${@}  	  \
	                 
	@${OBJCOPY} -O binary ${@} ${@:.axf=.bin}
	@rm ${COMPILER}/${ODIR}/*.d
###-L${LIBC_DIR}  -L${LIBGCC_DIR} ${LIBM} ${LIBC} ${LIBGCC} 
